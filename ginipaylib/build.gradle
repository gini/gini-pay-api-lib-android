plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'maven-publish'
    id 'org.jetbrains.dokka'
}

android {
    compileSdkVersion 31

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 31

        // Use the test runner with JUnit4 support
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField 'String', 'VERSION_NAME', "\"$version\""
    }
    buildTypes {
        debug {
            // Disabled due to a jacoco error when using kotlin 1.5 (java.lang.IllegalStateException: Unexpected SMAP line: *S KotlinDebug)
            testCoverageEnabled = false
            // Needed for instrumented tests
            multiDexEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api 'com.android.volley:volley:1.2.1'
    api 'com.parse.bolts:bolts-android:1.4.0'
    implementation 'com.datatheorem.android.trustkit:trustkit:1.1.3'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.preference:preference-ktx:1.1.1'

    kapt "com.squareup.moshi:moshi-kotlin-codegen:1.12.0"
    implementation "com.squareup.moshi:moshi:1.12.0"

    // Mocks for testing.
    androidTestImplementation "org.mockito:mockito-core:3.10.0"
    androidTestImplementation "org.mockito:mockito-android:3.10.0"
    androidTestImplementation "androidx.test:runner:1.4.0"
    androidTestImplementation "androidx.test:rules:1.4.0"
    androidTestImplementation "androidx.test.ext:junit:1.1.3"
    androidTestImplementation "androidx.multidex:multidex:2.0.1"

    dokkaHtmlPlugin "org.jetbrains.dokka:kotlin-as-java-plugin:$dokka_version"
}

apply from: file("repository.gradle")

def getLocalProperties = {
    File propertiesFile = file('local.properties')
    if (propertiesFile.exists()) {
        Properties properties = new Properties()
        propertiesFile.withInputStream { instr ->
            properties.load(instr)
        }
        return properties
    }
}

def setProperty(key, props, localProps) {
    if (project.hasProperty(key)) {
        props[key] = project.property(key)
    } else {
        props[key] = localProps?.get(key) ?: ''
    }
}

task createTestPropertyFile {
    doLast {
        def propertyFile = new File("$projectDir/src/androidTest/assets/test.properties")
        if (!propertyFile.exists()) propertyFile.createNewFile()
        def props = new Properties()

        def localProperties = getLocalProperties()

        setProperty('testClientId', props, localProperties)
        setProperty('testClientSecret', props, localProperties)
        setProperty('testClientIdAccounting', props, localProperties)
        setProperty('testClientSecretAccounting', props, localProperties)
        setProperty('testApiUri', props, localProperties)
        setProperty('testApiUriAccounting', props, localProperties)
        setProperty('testUserCenterUri', props, localProperties)

        propertyFile.withWriter("utf-8") {
            props.store(it, "test properties")
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.endsWith("Test")) {
        task.dependsOn.add(createTestPropertyFile)
    }
}

task sourcesJar(type: Jar, dependsOn: 'assembleRelease') {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set('javadoc')
    from dokkaJavadoc.outputDirectory
}

apply from: rootProject.file('gradle/javadoc_coverage.gradle')

dokkaHtml {
    outputDirectory.set(file("$buildDir/docs/dokka"))
    dokkaSourceSets {
        named("main") {
            noAndroidSdkLink.set(false)

            includes.from(files("module.md", packageDocumentationPaths(android.sourceSets.main.java.srcDirs[0])))
        }
    }
}

dokkaJavadoc {
    outputDirectory.set(file("$buildDir/docs/dokka-javadoc"))
}

static def packageDocumentationPaths(srcDir) {
    def packageDocs = []
    srcDir.eachFileRecurse {
        if (it.name == 'package.md') {
            packageDocs.add(it.getAbsolutePath())
        }
    }
    return packageDocs
}